REST API способо организации API- взаимодействия между сервером и клиентом 

Какими 6 характеристиками должен обладать API, чтобы называть REST-овым:
1. Кэшируемость 
    В данных запроса должно быть указано, нужно ли кэшировать данные (сохранять в специальном буфере для частых запросов). 
    Если такое указание есть, клиент получит право обращаться к этому буферу при необходимости.
2.Отсутствие записи состояния клиента (Stateless). Сервер не должен хранить информацию о состоянии (проведенных операций) клиента. 
    Каждый запрос от клиента должен содержать только ту информацию, которая нужна для получения данных от сервера.
3. Все данные должны запрашиваться через один URL-адрес стандартными протоколами, например, HTTP. 
    Это упрощает архитектуру сайта или приложения и делает взаимодействие с сервером понятнее.
4.Единый интерфейс
    Ресурсы должны быть однозначно идентифицированы посредством одного URL-адреса и 
    только с помощью базовых методов сетевого протокола (DELETE, PUT, GET, HTTP).
5. Клиент-сервер
    Должно быть четкое разграничение между клиентом и сервером:
    пользовательский интерфейс и вопросы сбора запросов — на стороне клиента.
    доступ к данным, управление рабочей нагрузкой и безопасность — на стороне сервера.
6.Многоуровневая система
    В многоуровневой системе посредники, такие как прокси-серверы, 
    могут размещаться между клиентом и сервером, используя единообразный интерфейс сети.
    Одним из преимуществ многоуровневой системы является то, 
    что посредники могут затем перехватывать трафик клиент-сервер для определенных целей/ Например, для кэширования.
REST API использует HTTP коды (200-ки, 300-ки и 500-ки)

HTTP коды:
    204 - No content 
    "Нет содержимого". Нет содержимого для ответа на запрос, но заголовки ответа, которые могут быть полезны, присылаются. 
    Клиент может использовать их для обновления кешированных заголовков полученных ранее для этого ресурса.
    200 - OK
    404 - Not Found
    500 - "Внутренняя ошибка сервера". Сервер столкнулся с ситуацией, которую он не знает как обработать.

1 день:
    Мы  обернули хэндлер в структуру, сделали конструктор по сути NewHandler для создания, что у нас структура handler не экспортируемая, 
    интерфейс хэндлера эскопртируемый с методом регистра, который регистрирует хэгдлер в http роутере. В точке входы мы создаем роутер создаем хэгдлер 
    и регистрируем наш хэгдлер в роутере и функция старт, который стартует наш сервер.